// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace QFramework.MyGame
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;
    using UniRx;
    using UniRx.Triggers;
    
    //========================  消息/事件 ===========================

    public enum GameMgrEvent
    {
        Start = QMgrID.UI,
        OnOwnerTime,
        OnEnemyTime,
        OnUsrCardDrag,
        OnUsrCardPlus,
        OnUsrCardMinus,
        OnPopCardPlus,
        OnPopCardClear,
        OnEnemyCardDrag,
        OnEnemyCardPlus,
        OnEnemyCardMinus,
        End,
    }

    public class OnUsrCardsPlusMsg : QMsg
    {
        public Card Data;

        public OnUsrCardsPlusMsg(Card data) : base((int)GameMgrEvent.OnUsrCardPlus)
        {
            Data = data;
        }
    }

    public class OnUsrCardsMinusMsg : QMsg
    {
        public Card Data;

        public OnUsrCardsMinusMsg(Card data) : base((int)GameMgrEvent.OnUsrCardMinus)
        {
            Data = data;
        }
    }

    public class OnUsrCardDragMsg : QMsg
    {
        public Card Data;

        public OnUsrCardDragMsg(Card data) : base((int)GameMgrEvent.OnUsrCardDrag)
        {
            Data = data;
        }
    }

    public class OnPopCardsPlusMsg : QMsg
    {
        public Card Data;

        public OnPopCardsPlusMsg(Card data) : base((int)GameMgrEvent.OnPopCardPlus)
        {
            Data = data;
        }
    }

    public class OnEnemyCardsPlusMsg : QMsg
    {
        public Card Data;

        public OnEnemyCardsPlusMsg(Card data) : base((int)GameMgrEvent.OnEnemyCardPlus)
        {
            Data = data;
        }
    }

    public class OnEnemyCardsMinusMsg : QMsg
    {
        public Card Data;

        public OnEnemyCardsMinusMsg(Card data) : base((int)GameMgrEvent.OnEnemyCardMinus)
        {
            Data = data;
        }
    }

    public class OnEnemyCardDragMsg : QMsg
    {
        public Card Data;

        public OnEnemyCardDragMsg(Card data) : base((int)GameMgrEvent.OnEnemyCardDrag)
        {
            Data = data;
        }
    }

    //============================================================

    
    public class GameMgrData : QFramework.UIPanelData
    {
        public CardList HandCardModel = new CardList()
        {
            Data = new List<Card>()
            {
                new Card() {HP_damage = 20, MP_need = 10},
                new Card() {HP_damage = 30, MP_need = 10},
                new Card() {HP_damage = 40, MP_need = 10},
            }
        };

        public CardList EnemyChardModel = new CardList()
        {
            Data = new List<Card>()
            {
                new Card() {HP_damage = 20, MP_need = 10},
                new Card() {HP_damage = 30, MP_need = 10},
                new Card() {HP_damage = 40, MP_need = 10},
            }
        };

        public CardList PopCardModel = new CardList();
    }
    
    public partial class GameMgr : QFramework.UIPanel
    {
        
        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            switch (eventId)
            {
                case (int)GameMgrEvent.OnOwnerTime:
                    SendMsg(new OnUsrCardsPlusMsg(new Card()));     // todo 实现随机化
                    UIUsrCardsArea.OnActivateCards();
                    UIEnemyCardsArea.OnDeactivateCards();
                    break;

                case (int)GameMgrEvent.OnEnemyTime:
                    SendMsg(new OnEnemyCardsPlusMsg(new Card()));
                    UIUsrCardsArea.OnDeactivateCards();              // todo 卡牌处于拖动状态会有bug
                    UIEnemyCardsArea.OnActivateCards();
                    break;

                //======================================================

                case (int)GameMgrEvent.OnUsrCardDrag:
                    var usrDragMsg = msg as OnUsrCardDragMsg;

                    SendMsg(new OnUsrCardsMinusMsg(usrDragMsg.Data));      // todo 容易产生大量GC操作，需用pool改善
                    if (UIPopCardsArea.State == PopCardsAreaState.OnEnterTrigger)
                    {
                        SendMsg(new OnPopCardsPlusMsg(usrDragMsg.Data));

                        UIPopCardsArea.State = PopCardsAreaState.Normal;
                    }
                    else
                    {
                        SendMsg(new OnEnemyCardsPlusMsg(usrDragMsg.Data));
                    }
                    break;

                case (int)GameMgrEvent.OnUsrCardPlus:
                    var usrPlusMsg = msg as OnEnemyCardsPlusMsg;
                    UIUsrCardsArea.OnCardsNumPlus(UICard, usrPlusMsg.Data);
                    break;

                case (int)GameMgrEvent.OnUsrCardMinus:
                    var usrMinusMsg = msg as OnUsrCardsMinusMsg;
                    UIUsrCardsArea.OnCardsNumMinus(usrMinusMsg.Data);
                    break;

                //============================================================

                case (int)GameMgrEvent.OnEnemyCardDrag:
                    var enemyDragMsg = msg as OnEnemyCardDragMsg;

                    SendMsg(new OnUsrCardsMinusMsg(enemyDragMsg.Data));      // todo 容易产生大量GC操作，需用pool改善
                    if (UIPopCardsArea.State == PopCardsAreaState.OnEnterTrigger)
                    {
                        SendMsg(new OnPopCardsPlusMsg(enemyDragMsg.Data));

                        UIPopCardsArea.State = PopCardsAreaState.Normal;
                    }
                    else
                    {
                        SendMsg(new OnEnemyCardsPlusMsg(enemyDragMsg.Data));
                    }
                    break;

                case (int)GameMgrEvent.OnEnemyCardPlus:
                    var enemyPlusMsg = msg as OnEnemyCardsPlusMsg;
                    UIEnemyCardsArea.OnCardsNumPlus(UICard, enemyPlusMsg.Data);
                    break;

                case (int)GameMgrEvent.OnEnemyCardMinus:
                    var enemyMinusMsg = msg as OnEnemyCardsMinusMsg;
                    UIEnemyCardsArea.OnCardsNumMinus(enemyMinusMsg.Data);
                    break;

                //====================================================================

                case (int)GameMgrEvent.OnPopCardPlus:
                    var popPlusMsg = msg as OnPopCardsPlusMsg;
                    UIPopCardsArea.OnCardNumPlus(UICard, popPlusMsg.Data);
                    break;

                case (int)GameMgrEvent.OnPopCardClear:
                    UIPopCardsArea.OnPopCardsClear();
                    break;

                default:
                    Debug.Log(eventId);
                    break;
            }
        }
        
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as GameMgrData ?? new GameMgrData();

            // 初始化手牌区
            UIUsrCardsArea.Init(UICard, mData.HandCardModel);
            UIEnemyCardsArea.Init(UICard, mData.EnemyChardModel);
            
            // 定时器
            Timer.Init();

            RegisterEvents();
        }

        void RegisterEvents()
        {
            RegisterEvent(GameMgrEvent.OnUsrCardPlus);
            RegisterEvent(GameMgrEvent.OnUsrCardMinus);
            RegisterEvent(GameMgrEvent.OnUsrCardDrag);
            RegisterEvent(GameMgrEvent.OnEnemyCardDrag);
            RegisterEvent(GameMgrEvent.OnEnemyCardPlus);
            RegisterEvent(GameMgrEvent.OnEnemyCardMinus);
            RegisterEvent(GameMgrEvent.OnPopCardPlus);
            RegisterEvent(GameMgrEvent.OnPopCardClear);
            RegisterEvent(GameMgrEvent.OnOwnerTime);
            RegisterEvent(GameMgrEvent.OnEnemyTime);
        }

        protected override void OnOpen(QFramework.IUIData uiData)
        {
            // todo
        }
        
        protected override void OnShow()
        {
        }
        
        protected override void OnHide()
        {
        }
        
        protected override void OnClose()
        {
            this.ClearUIComponents();
        }
    }
}
