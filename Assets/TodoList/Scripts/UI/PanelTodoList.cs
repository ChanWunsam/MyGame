// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace QFramework.TodoList
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using UnityEngine;
    using UnityEngine.UI;
    using QFramework;

    //=============================     消息/事件    =========================================

    public enum PanelTodoListEvent
    {
        Start = QMgrID.UI,
        OnDataChange,
        OnTodoItemSelect,
        End,
    }

    public class OnTodoItemSelectMsg : QMsg
    {
        public TodoItem ItemData;

        public OnTodoItemSelectMsg(TodoItem itemData) : base((int)PanelTodoListEvent.OnTodoItemSelect)
        {
            ItemData = itemData;
        }
    }

    //===========================        状态           ======================================

    public enum PanelTodoListState
    {
        Create,
        Modify,
    }

    //========================================================================================


    public class PanelTodoListData : QFramework.UIPanelData
    {
        // 测试用例
        public TodoList Model = new TodoList()
        {
            mTodoItems = new List<TodoItem>()
            {
                new TodoItem() { Completed = false, Content = "need to study" },
                new TodoItem() { Completed = false, Content = "need to have lunch" },
            }
        };

        public PanelTodoListState State = PanelTodoListState.Create;

    }


    public partial class PanelTodoList : QFramework.UIPanel
    {

        void OnDataChanged()
        {
            Container.DestroyAllChild();
            //Debug.Log(mData.Model.mTodoItems.Count);
            if (mData.Model.mTodoItems.IsNotNull())
            {
                mData.Model.mTodoItems.Where(item => !item.Completed).ForEach(item =>
                {
                    UITodoItem.Instantiate()
                            .Parent(Container)
                            .LocalIdentity()
                            .ApplySelfTo(self => self.Init(item))
                            .Show();
                });
            }
        }

        protected override void RegisterUIEvent()
        {
            base.RegisterUIEvent();

            // 添加todo事件
            InputField.onEndEdit.AddListener(content =>
            {
                if (content.IsNotNullAndEmpty() && Input.GetKeyDown(KeyCode.Return))
                {
                    mData.Model.mTodoItems.Add(new TodoItem()
                    {
                        Completed = false,
                        Content = content,
                    });
                    OnDataChanged();
                }
                InputField.text = string.Empty;
            });

            // 查看completed list事件
            BtnCheckCompleted.onClick.AddListener(() =>
            {
                CloseSelf();
                UIMgr.OpenPanel<PanelCompletedList>(new PanelCompletedListData()
                {
                    Model = mData.Model,
                });
            });

            // 删除todo / 清空输入 事件
            BtnDelete.onClick.AddListener(() =>
            {
                if (mData.State == PanelTodoListState.Modify)
                {
                    
                }
                BtnOK.interactable = false;
                BtnDelete.interactable = false;
                InputField.text = string.Empty;
            });
        }

        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            if (eventId == (int)PanelTodoListEvent.OnDataChange) 
            {
                // 勾选todo事件
                OnDataChanged();
            }
            else if (eventId == (int)PanelTodoListEvent.OnTodoItemSelect)
            {
                // 修改todo事件
                var selectMsg = msg as OnTodoItemSelectMsg;
                TodoItem itemData = selectMsg.ItemData;
                InputField.text = itemData.Content;

                mData.State = PanelTodoListState.Modify;
                BtnOK.interactable = true;
                BtnDelete.interactable = true;
            }
        }
        
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as PanelTodoListData ?? new PanelTodoListData();
            // please add init code here
            OnDataChanged();
            RegisterEvent(PanelTodoListEvent.OnDataChange);
            RegisterEvent(PanelTodoListEvent.OnTodoItemSelect);
        }
        
        protected override void OnOpen(QFramework.IUIData uiData)
        {
        }
        
        protected override void OnShow()
        {
        }
        
        protected override void OnHide()
        {
        }
        
        protected override void OnClose()
        {
        }
    }

}
